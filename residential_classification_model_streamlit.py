# -*- coding: utf-8 -*-
"""Residential Classification model streamlit

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rADidLsSlEKxtXosH08WVbvZJNHh8Snc
"""

import streamlit as st
import pandas as pd
import gspread
import json
from oauth2client.service_account import ServiceAccountCredentials


scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
json_key = st.secrets["google_sheets"]["json_key"]
service_account_info = json.loads(json_key)
creds = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
client = gspread.authorize(creds)

# Access Google Sheet
spreadsheet_id = "1TwOzGlLAM-lvw2NUTxc5hZhwk4uLI6BRfLD83ttDfHc"
sheet = client.open_by_key(spreadsheet_id)
summary_sheet = sheet.worksheet("All-predictions")

# Load data
data = summary_sheet.get_all_records()
df = pd.DataFrame(data)


product_hierarchy = {
    "Update Search": 1, "Current Owner Search": 2, "Two Owner Search": 3,
    "Full 30 YR Search": 4, "Full 40 YR Search": 5, "Full 50 YR Search": 6,
    "Full 60 YR Search": 7, "Full 80 YR Search": 8, "Full 100 YR Search": 9,
}


st.title("Residential Online/Ground Prediction")


# Validate required columns
required_columns = ["State", "County", "Product Type", "Prediction"]
for col in required_columns:
    if col not in df.columns:
        st.error(f"Missing column: {col}")
        st.stop()

# --- Selection: State
state = st.selectbox("Select State", sorted(df["State"].dropna().unique()))
filtered_state = df[df["State"] == state]

# --- Selection: County
county = st.selectbox("Select County", sorted(filtered_state["County"].dropna().unique()))
filtered_county = filtered_state[filtered_state["County"] == county]

# --- Selection: Product Type (sorted by hierarchy)
product_types = filtered_county["Product Type"].dropna().unique()
sorted_products = sorted(product_types, key=lambda x: product_hierarchy.get(x, float('inf')))
product = st.selectbox("Select Product Ordered", sorted_products)

# --- Prediction Lookup
filtered_row = filtered_county[filtered_county["Product Type"] == product]

if not filtered_row.empty:
    result = filtered_row.iloc[0]["Prediction"]
    st.success(f" Prediction: **{result}**")
else:
    st.warning(" No prediction found for the selected combination.")